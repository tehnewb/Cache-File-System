
plugins {
	id 'java'
	id 'eclipse'
}

java.sourceCompatibility = 17
java.targetCompatibility = 17
version = '1.0'
 
repositories {
    mavenCentral()
}
 
dependencies {

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    
    // https://mvnrepository.com/artifact/com.google.guava/guava
	implementation 'com.google.guava:guava:31.1-jre'
	
	// https://mvnrepository.com/artifact/io.netty/netty-all
	implementation 'io.netty:netty-all:4.1.77.Final'
	
	// https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.swt.win32.win32.x86_64
	implementation 'org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:3.119.0'
	
	
	// https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.jface
	implementation 'org.eclipse.platform:org.eclipse.jface:3.25.0'

	implementation 'org.eclipse.platform:org.eclipse.e4.ui.css.swt.theme:0.13.0'	
	
	// https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.e4.core.di.annotations
	implementation 'org.eclipse.platform:org.eclipse.e4.core.di.annotations:1.7.100'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3:3.12.0'
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            def os = System.getProperty("os.name").toLowerCase()
            if (os.contains("windows")) {
                substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:3.119.0")
            }
            else if (os.contains("linux")) {
                substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64:3.119.0")
            }
            else if (os.contains("mac")) {
                substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:3.119.0")
            }
        }
    }
}

test {
    useJUnit()
    useJUnitPlatform()
}

tasks.register("BuildArchiveTool", Jar) {
	archiveBaseName.set("Archive Tool")
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
	manifest {
		attributes 'Main-Class': "com.tool.ArchiveTool"
	}
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
	with jar
}

sourceSets {
	main.java.srcDirs = ['src/main']
    main.resources.srcDirs = ['src/main']
    test.java.srcDirs = ['src/test']
    test.resources.srcDirs = ['src/test']
}

